<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FlacLibSharp</name>
    </assembly>
    <members>
        <member name="T:FlacLibSharp.Exceptions.FlacLibSharpException">
            <summary>
            These are the exceptions the FlacLibSharp library will produce.
            </summary>
        </member>
        <member name="M:FlacLibSharp.Exceptions.FlacLibSharpException.#ctor(System.String)">
            <summary>
            Creates a new FlacLibSharp exception.
            </summary>
            <param name="message">A clear description of the issue.</param>
        </member>
        <member name="T:FlacLibSharp.Exceptions.FlacLibSharpMaxTracksExceededException">
            <summary>
            This exception is raised when too many tracks are added to a CueSheet.
            </summary>
        </member>
        <member name="M:FlacLibSharp.Exceptions.FlacLibSharpMaxTracksExceededException.#ctor(System.Int32)">
            <summary>
            Creates a new exception indicating there are too many tracks added to a CueSheet.
            </summary>
            <param name="maxTracks">How many tracks that are allowed.</param>
        </member>
        <member name="T:FlacLibSharp.Exceptions.FlacLibSharpMaxTrackIndicesExceededException">
            <summary>
            This exception is raised when too many index points are added to a CueSheet Track.
            </summary>
        </member>
        <member name="M:FlacLibSharp.Exceptions.FlacLibSharpMaxTrackIndicesExceededException.#ctor(System.Int32)">
            <summary>
            Creates an exception to indicate that too many index points have been added to a CueSheet Track.
            </summary>
            <param name="maxIndexPoints">How many index points that are allowed.</param>
        </member>
        <member name="T:FlacLibSharp.Exceptions.FlacLibSharpInvalidFormatException">
            <summary>
            This exception is raised when you try to load an invalid flac file.
            </summary>
        </member>
        <member name="M:FlacLibSharp.Exceptions.FlacLibSharpInvalidFormatException.#ctor(System.String)">
            <summary>
            Creates a new exception/
            </summary>
            <param name="details">Technical details on what exactly has gone wrong.</param>
        </member>
        <member name="P:FlacLibSharp.Exceptions.FlacLibSharpInvalidFormatException.Details">
            <summary>
            Technical details on what exactly has gone wrong.
            </summary>
        </member>
        <member name="T:FlacLibSharp.Exceptions.FlacLibSharpSaveNotSupportedException">
            <summary>
            This exception is raised when you try to load an invalid flac file.
            </summary>
        </member>
        <member name="M:FlacLibSharp.Exceptions.FlacLibSharpSaveNotSupportedException.#ctor">
            <summary>
            Creates a new exception/
            </summary>
            <param name="details">Technical details on what exactly has gone wrong.</param>
        </member>
        <member name="P:FlacLibSharp.Exceptions.FlacLibSharpSaveNotSupportedException.Details">
            <summary>
            Technical details on what exactly has gone wrong.
            </summary>
        </member>
        <member name="T:FlacLibSharp.Exceptions.FlacLibSharpInvalidPaddingBitCount">
            <summary>
            A padding block of metadata was set to an invalid bit length.
            </summary>
        </member>
        <member name="M:FlacLibSharp.Exceptions.FlacLibSharpInvalidPaddingBitCount.#ctor(System.String)">
            <summary>
            Creates a new FlacLibSharpStreamInfoMissing.
            </summary>
        </member>
        <member name="T:FlacLibSharp.Exceptions.FlacLibSharpStreamInfoMissing">
            <summary>
            A Flac file was loaded that didn't contain the stream info. This is the only metadata block that is mandatory.
            </summary>
        </member>
        <member name="M:FlacLibSharp.Exceptions.FlacLibSharpStreamInfoMissing.#ctor">
            <summary>
            Creates a new FlacLibSharpStreamInfoMissing.
            </summary>
        </member>
        <member name="T:FlacLibSharp.FastFlac">
            <summary>
            Wrapper class for fast access to some of the FLAC functions
            </summary>
        </member>
        <member name="M:FlacLibSharp.FastFlac.GetMetaData(System.String)">
            <summary>
            Gives you all available metadata blocks in the flac file.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:FlacLibSharp.FastFlac.GetStreamInfo(System.String)">
            <summary>
            Gives you the StreamInfo metadata
            </summary>
            <param name="path"></param>
            <returns>The StreamInfo metadata or null if no StreamInfo metadata is found.</returns>
        </member>
        <member name="M:FlacLibSharp.FastFlac.GetVorbisComment(System.String)">
            <summary>
            Gives you the vorbis comment metadata (ID3V2 tags).
            </summary>
            <param name="path"></param>
            <returns>The vorbis comment metadata or null if none is available.</returns>
        </member>
        <member name="M:FlacLibSharp.FastFlac.GetVorbisField(System.String,System.String)">
            <summary>
            Gets the specific vorbis field name (example = ARTIST) if it is available.
            </summary>
            <param name="path"></param>
            <param name="fieldName"></param>
            <returns>The value of the field or an empty string if the field is not available.</returns>
        </member>
        <member name="M:FlacLibSharp.FastFlac.GetArtist(System.String)">
            <summary>
            Gets the artist of the track.
            </summary>
            <param name="path"></param>
            <returns>Empty string if the track number isn't specified in the metadata</returns>
        </member>
        <member name="M:FlacLibSharp.FastFlac.GetTitle(System.String)">
            <summary>
            Gets the title of the track.
            </summary>
            <param name="path"></param>
            <returns>Empty string if the track number isn't specified in the metadata</returns>
        </member>
        <member name="M:FlacLibSharp.FastFlac.GetAlbum(System.String)">
            <summary>
            Gets the album name.
            </summary>
            <param name="path"></param>
            <returns>Empty string if the track number isn't specified in the metadata</returns>
        </member>
        <member name="M:FlacLibSharp.FastFlac.GetTrackNumber(System.String)">
            <summary>
            Gets the track number.
            </summary>
            <param name="path"></param>
            <returns>Empty string if the track number isn't specified in the metadata</returns>
        </member>
        <member name="M:FlacLibSharp.FastFlac.GetGenre(System.String)">
            <summary>
            Gets the genre of the track.
            </summary>
            <param name="path"></param>
            <returns>Empty string if no genre is specified in the metadata.</returns>
        </member>
        <member name="M:FlacLibSharp.FastFlac.GetDuration(System.String)">
            <summary>
            Gets the duration of the track in seconds.
            </summary>
            <param name="path"></param>
            <returns>The duration of the track in seconds or 0 if the duration is not known (sample count is missing from streaminfo metadata)</returns>
        </member>
        <member name="T:FlacLibSharp.FlacFile">
            <summary>
            Parses FLAC data from the given stream of file.
            </summary>
            <remarks>Only metadata parsing is currently implemented, decoding frames is THE big TODO.</remarks>
        </member>
        <member name="M:FlacLibSharp.FlacFile.#ctor(System.String)">
            <summary>
            Open a Flac File
            </summary>
            <param name="path">Path to the file.</param>
        </member>
        <member name="M:FlacLibSharp.FlacFile.#ctor(System.IO.Stream)">
            <summary>
            Open a flac file from a stream of data
            </summary>
            <param name="data">Any stream of data</param>
            <remarks>Stream is assumed to be at the beginning of the FLAC data</remarks>
        </member>
        <member name="M:FlacLibSharp.FlacFile.Initialize">
            <summary>
            Verifies the flac identity and tries to load the available metadata blocks.
            </summary>
        </member>
        <member name="M:FlacLibSharp.FlacFile.VerifyFlacIdentity">
            <summary>
            Verifies whether or not the first four bytes of the file indicate this is a flac file.
            </summary>
        </member>
        <member name="M:FlacLibSharp.FlacFile.ReadMetadata">
            <summary>
            Tries to parse all the metadata blocks available in the file.
            </summary>
        </member>
        <member name="M:FlacLibSharp.FlacFile.GetAllApplicationInfo">
            <summary>
            Returns all ApplicationInfo metadata blocks (if there are any) of the loaded Flac file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlacLibSharp.FlacFile.GetAllCueSheets">
            <summary>
            Returns all CueSheet metadata blocks (if there are any) of the loaded Flac file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlacLibSharp.FlacFile.GetAllPadding">
            <summary>
            Returns all Padding metadata blocks (if there are any) of the loaded Flac file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlacLibSharp.FlacFile.GetAllPictures">
            <summary>
            Will return all Picture blocks available in the Flac file, or an empty list of none are found.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FlacLibSharp.FlacFile.Dispose">
            <summary>
            Releases the loaded flac file.
            </summary>
        </member>
        <member name="P:FlacLibSharp.FlacFile.Metadata">
            <summary>
            A list of all the available metadata.
            </summary>
        </member>
        <member name="P:FlacLibSharp.FlacFile.StreamInfo">
            <summary>
            Returns the StreamInfo metedata block of the loaded Flac file.
            </summary>
        </member>
        <member name="P:FlacLibSharp.FlacFile.ApplicationInfo">
            <summary>
            Returns the first ApplicationInfo metadata block of the loaded Flac file or null if this block is not available.
            </summary>
        </member>
        <member name="P:FlacLibSharp.FlacFile.VorbisComment">
            <summary>
            Returns the VorbisComment metadata block of the loaded Flac file or null if this block is not available.
            </summary>
        </member>
        <member name="P:FlacLibSharp.FlacFile.CueSheet">
            <summary>
            Returns the CueSheet metadata block of the loaded Flac file or null if this block is not available.
            </summary>
        </member>
        <member name="P:FlacLibSharp.FlacFile.SeekTable">
            <summary>
            Returns the SeekTable metadata block of the loaded Flac file or null if this block is not available.
            </summary>
        </member>
        <member name="P:FlacLibSharp.FlacFile.Padding">
            <summary>
            Returns the Padding metadata block of the loaded Flac file or null if this block is not available.
            </summary>
        </member>
        <member name="T:FlacLibSharp.Helpers.BinaryDataHelper">
            <summary>
            A helper class for parsing byes and bits to actual numbers.
            </summary>
            <remarks>Currently always operates with Big-Endian numbers (because this was created for FLAC parsing which uses big-endian by default).</remarks>
        </member>
        <member name="M:FlacLibSharp.Helpers.BinaryDataHelper.GetDataSubset(System.Byte[],System.Int32,System.Int32)">
            <summary>
            From a given data array, get a subset of items in a deep copied array.
            </summary>
            <param name="data">The input data (won't be altered)</param>
            <param name="offset">Where in the input data to start copying files.</param>
            <param name="length">The amount of bytes to copy.</param>
            <returns>A new array with a copy of the subset of data.</returns>
        </member>
        <member name="M:FlacLibSharp.Helpers.BinaryDataHelper.GetUInt16(System.Byte[],System.Int32)">
            <summary>
            From the data, reads an unsigned 16 bit integer starting from the offset.
            </summary>
            <param name="data">The source data</param>
            <param name="byteOffset">Offset from where to start reading the integer, in bytes.</param>
            <returns>The number that was read.</returns>
        </member>
        <member name="M:FlacLibSharp.Helpers.BinaryDataHelper.GetUInt24(System.Byte[],System.Int32)">
            <summary>
            From the data, reads an unsigned 24 bit integer starting from the offset.
            </summary>
            <param name="data">The source data</param>
            <param name="byteOffset">Offset from where to start reading the integer, in bytes.</param>
            <returns>The number that was read (it reads 24 bits, but the actual type will be a 32 bit integer).</returns>
        </member>
        <member name="M:FlacLibSharp.Helpers.BinaryDataHelper.GetUInt32(System.Byte[],System.Int32)">
            <summary>
            From the data, reads an unsigned 32 bit integer starting from the offset.
            </summary>
            <param name="data">The source data</param>
            <param name="byteOffset">Offset from where to start reading the integer, in bytes.</param>
            <returns>The number that was read.</returns>
        </member>
        <member name="M:FlacLibSharp.Helpers.BinaryDataHelper.GetUInt64(System.Byte[],System.Int32)">
            <summary>
            From the data, reads an unsigned 64 bit integer starting from the offset.
            </summary>
            <param name="data">The source data</param>
            <param name="byteOffset">Offset from where to start reading the integer, in bytes.</param>
            <returns>The number that was read.</returns>
        </member>
        <member name="M:FlacLibSharp.Helpers.BinaryDataHelper.GetBoolean(System.Byte[],System.Int32,System.Byte)">
            <summary>
            From the data, reads boolean at the offset.
            </summary>
            <param name="data">The source data</param>
            <param name="byteOffset">Offset from where to start reading the boolean, in bytes.</param>
            <param name="bitOffset">In the found byte, defines the bit that will represent the boolean.</param>
            <returns>The number that was read.</returns>
        </member>
        <member name="M:FlacLibSharp.Helpers.BinaryDataHelper.GetUInt64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            From the data, reads an integer value starting from the offset.
            </summary>
            <param name="data">The source data</param>
            <param name="byteOffset">Offset from where to start reading the integer, in bytes.</param>
            <param name="bitCount">How many bits to read (16, 32, or something arbitrary but less than or equal to 64)</param>
            <returns>The number that was read.</returns>
        </member>
        <member name="M:FlacLibSharp.Helpers.BinaryDataHelper.GetUInt64(System.Byte[],System.Int32,System.Int32,System.Byte)">
            <summary>
            Allows you to interpret part of a byte array as a number.
            </summary>
            <param name="data">The source data.</param>
            <param name="byteOffset">Where in the data to start reading (offset in bytes)</param>
            <param name="bitCount">How many bits to read (16, 32, or something arbitrary but less than or equal to 64)</param>
            <param name="bitOffset">In the first byte, at which bit to start reading the data from.</param>
            <remarks>Always assumes Big-Endian in the data store.</remarks>
            <returns></returns>
        </member>
        <member name="M:FlacLibSharp.Helpers.BinaryDataHelper.GetBytesUInt16(System.UInt16)">
            <summary>
            Converts the given value to a big-endian byte stream.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:FlacLibSharp.Helpers.BinaryDataHelper.GetBytesUInt32(System.UInt32)">
            <summary>
            Converts the given value to a big-endian byte stream.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:FlacLibSharp.Helpers.BinaryDataHelper.GetBytesUInt64(System.UInt64)">
            <summary>
            Converts the given value to a big-endian byte stream.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:FlacLibSharp.Helpers.BinaryDataHelper.GetBytes(System.UInt64,System.Int32)">
            <summary>
            Converts the given value to a big-endian byte stream.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="size">How many bytes to convert (the rest will be ignored in the value).</param>
            <returns></returns>
        </member>
        <member name="M:FlacLibSharp.Helpers.BinaryDataHelper.GetPaddedAsciiBytes(System.String,System.Int32)">
            <summary>
            Will return an array of ascii printable characters (values 0x20 to 0x7e) and will pad with zero's so that the array of bytes is always of a given size.
            </summary>
            <param name="value">The text to convert to bytes.</param>
            <param name="size">The total length of the resulting byte array.</param>
            <returns></returns>
        </member>
        <member name="M:FlacLibSharp.Helpers.BinaryDataHelper.SwitchEndianness(System.Byte[],System.Int32,System.Int32)">
            <summary>
            For a given array of bytes, switch the endiannes of the length-bytes starting at byteOffset.
            </summary>
            <param name="data">The source data.</param>
            <param name="byteOffset">Where to start switching the endianness.</param>
            <param name="length">How many bytes to switch.</param>
            <returns></returns>
        </member>
        <member name="T:FlacLibSharp.ApplicationInfo">
            <summary>
            An application specific block of data.
            </summary>
        </member>
        <member name="T:FlacLibSharp.MetadataBlock">
            <summary>
            The abstract base class for all meta data blocks.
            </summary>
        </member>
        <member name="M:FlacLibSharp.MetadataBlock.#ctor">
            <summary>
            Creates an empty metadata block
            </summary>
        </member>
        <member name="M:FlacLibSharp.MetadataBlock.LoadBlockData(System.Byte[])">
            <summary>
            When overridden in a derived class, will load the given type of metadata from the data provided.
            </summary>
            <param name="data">The data where to find the metadata block in.</param>
        </member>
        <member name="M:FlacLibSharp.MetadataBlock.WriteBlockData(System.IO.Stream)">
            <summary>
            When overridden in a derived class, will write the data describing this metadata block to the given stream.
            </summary>
            <param name="targetStream">Stream to write the data to.</param>
        </member>
        <member name="M:FlacLibSharp.MetadataBlock.Create(System.IO.Stream)">
            <summary>
            Loads the first meta data block found on the stream (first byte is supposed to be the start of the meta data block)... the stream will be forwarded to the start
            of the next meta data block (or the start of the audio frames)
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:FlacLibSharp.MetadataBlock.Header">
            <summary>
            Each metadata block has a header, defining it's type among other things.
            </summary>
        </member>
        <member name="M:FlacLibSharp.ApplicationInfo.#ctor">
            <summary>
            Creates an empty ApplicationInfo block, application id will be 0, application data will be empty.
            </summary>
        </member>
        <member name="M:FlacLibSharp.ApplicationInfo.LoadBlockData(System.Byte[])">
            <summary>
            Parses the given binary metadata to an ApplicationInfo block
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:FlacLibSharp.ApplicationInfo.WriteBlockData(System.IO.Stream)">
            <summary>
            Will write the data describing this metadata block to the given stream.
            </summary>
            <param name="targetStream">Stream to write the data to.</param>
        </member>
        <member name="P:FlacLibSharp.ApplicationInfo.ApplicationID">
            <summary>
            The application ID of the application for which the data is intended
            </summary>
        </member>
        <member name="P:FlacLibSharp.ApplicationInfo.ApplicationData">
            <summary>
            The additional data
            </summary>
        </member>
        <member name="T:FlacLibSharp.CueSheet">
            <summary>
            This block stores various information for use in a cue sheet.
            </summary>
        </member>
        <member name="M:FlacLibSharp.CueSheet.LoadBlockData(System.Byte[])">
            <summary>
            Parses the binary metadata from the flac file into a CueSheet object.
            </summary>
            <param name="data">The binary data from the flac file.</param>
        </member>
        <member name="M:FlacLibSharp.CueSheet.WriteBlockData(System.IO.Stream)">
            <summary>
            Will write the data describing this metadata block to the given stream.
            </summary>
            <param name="targetStream">Stream to write the data to.</param>
        </member>
        <member name="M:FlacLibSharp.CueSheet.CalculateMetaDataBlockLength">
            <summary>
            Calculates the total Block Length of this metadata block (for use in the Header)
            </summary>
            <returns></returns>
        </member>
        <member name="P:FlacLibSharp.CueSheet.MediaCatalog">
            <summary>
            Gets or sets the media catalog number.
            </summary>
        </member>
        <member name="P:FlacLibSharp.CueSheet.LeadInSampleCount">
            <summary>
            Gets or sets the number of lead-in samples, this field is only relevant for CD-DA cuesheets.
            </summary>
        </member>
        <member name="P:FlacLibSharp.CueSheet.IsCDCueSheet">
            <summary>
            Gets or sets whether the cuesheet corresponds to a Compact Disc.
            </summary>
        </member>
        <member name="P:FlacLibSharp.CueSheet.TrackCount">
            <summary>
            The number of tracks.
            </summary>
        </member>
        <member name="P:FlacLibSharp.CueSheet.Tracks">
            <summary>
            The collection of tracks in the cuesheet.
            </summary>
        </member>
        <member name="T:FlacLibSharp.CueSheetTrack">
            <summary>
            TODO: A single track in the cuesheet.
            </summary>
        </member>
        <member name="M:FlacLibSharp.CueSheetTrack.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initialize the CueSheetTrack
            </summary>
            <param name="data">The full data array.</param>
            <param name="dataOffset">Where the cuesheet track begins.</param>
        </member>
        <member name="M:FlacLibSharp.CueSheetTrack.WriteBlockData(System.IO.Stream)">
            <summary>
            Will write the data representing this CueSheet track to the given stream.
            </summary>
            <param name="targetStream"></param>
        </member>
        <member name="P:FlacLibSharp.CueSheetTrack.TrackOffset">
            <summary>
            Offset of a track.
            </summary>
        </member>
        <member name="P:FlacLibSharp.CueSheetTrack.TrackNumber">
            <summary>
            Number of the track.
            </summary>
        </member>
        <member name="P:FlacLibSharp.CueSheetTrack.ISRC">
            <summary>
            The ISRC of the track.
            </summary>
        </member>
        <member name="P:FlacLibSharp.CueSheetTrack.IsAudioTrack">
            <summary>
            Indicates whether or not this is an audio track.
            </summary>
        </member>
        <member name="P:FlacLibSharp.CueSheetTrack.IsPreEmphasis">
            <summary>
            The Pre Emphasis flag.
            </summary>
        </member>
        <member name="P:FlacLibSharp.CueSheetTrack.IsLeadOut">
            <summary>
            Checks whether or not the track is a lead-out track (meaning track number is either 170 or 255, depending on CD-DA or not)
            </summary>
        </member>
        <member name="P:FlacLibSharp.CueSheetTrack.IndexPointCount">
            <summary>
            Number of track index points. There must be at least one index in every track in a CUESHEET except for the lead-out track, which must have zero. For CD-DA, this number may be no more than 100.
            </summary>
        </member>
        <member name="P:FlacLibSharp.CueSheetTrack.IndexPoints">
            <summary>
            All of the index points in the cue sheet track.
            </summary>
        </member>
        <member name="T:FlacLibSharp.CueSheetTrackCollection">
            <summary>
            A set of Cue Sheet Tracks
            </summary>
        </member>
        <member name="T:FlacLibSharp.CueSheetTrackIndex">
            <summary>
            One index in a Cue Sheet Track.
            </summary>
        </member>
        <member name="M:FlacLibSharp.CueSheetTrackIndex.#ctor">
            <summary>
            Creates a new Cue Sheet Track Index.
            </summary>
        </member>
        <member name="M:FlacLibSharp.CueSheetTrackIndex.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates a new Cue Sheet Track Index based on the binary data provided.
            </summary>
            <param name="data"></param>
            <param name="dataOffset">Where in the data array to start reading.</param>
        </member>
        <member name="M:FlacLibSharp.CueSheetTrackIndex.WriteBlockData(System.IO.Stream)">
            <summary>
            Will write the data representing this CueSheet track index point to the given stream.
            </summary>
            <param name="targetStream"></param>
        </member>
        <member name="P:FlacLibSharp.CueSheetTrackIndex.Offset">
            <summary>
            Offset in samples, relative to the track offset, of the index point. For CD-DA, the offset must be evenly divisible by 588 samples (588 samples = 44100 samples/sec * 1/75th of a sec). Note that the offset is from the beginning of the track, not the beginning of the audio data.
            </summary>
        </member>
        <member name="P:FlacLibSharp.CueSheetTrackIndex.IndexPointNumber">
            <summary>
            The index point number. For CD-DA, an index number of 0 corresponds to the track pre-gap. The first index in a track must have a number of 0 or 1, and subsequently, index numbers must increase by 1. Index numbers must be unique within a track.
            </summary>
        </member>
        <member name="T:FlacLibSharp.CueSheetTrackIndexCollection">
            <summary>
            A set of cue sheet track indexes.
            </summary>
        </member>
        <member name="T:FlacLibSharp.PictureType">
            <summary>
            What kind of picture is in the flac file, picture type according to the ID3v2 APIC frame.
            </summary>
        </member>
        <member name="F:FlacLibSharp.PictureType.Other">
            <summary>
            A general picture.
            </summary>
        </member>
        <member name="F:FlacLibSharp.PictureType.FileIcon">
            <summary>
            The picture is a file icon.
            </summary>
        </member>
        <member name="F:FlacLibSharp.PictureType.OtherFileIcon">
            <summary>
            The picture is another file icon.
            </summary>
        </member>
        <member name="F:FlacLibSharp.PictureType.CoverFront">
            <summary>
            The picture is the front cover of an album.
            </summary>
        </member>
        <member name="F:FlacLibSharp.PictureType.CoverBack">
            <summary>
            The picture is the back cover of an album.
            </summary>
        </member>
        <member name="F:FlacLibSharp.PictureType.LeafletPage">
            <summary>
            The picture is the leaflet page of an album.
            </summary>
        </member>
        <member name="F:FlacLibSharp.PictureType.Media">
            <summary>
            The picture is a media page (e.g. label of CD).
            </summary>
        </member>
        <member name="F:FlacLibSharp.PictureType.LeadArtist">
            <summary>
            The picture of the lead artist.
            </summary>
        </member>
        <member name="F:FlacLibSharp.PictureType.Artist">
            <summary>
            Picture of the artist.
            </summary>
        </member>
        <member name="F:FlacLibSharp.PictureType.Conductor">
            <summary>
            Picture of the conductor.
            </summary>
        </member>
        <member name="F:FlacLibSharp.PictureType.Band">
            <summary>
            Picture of the band.
            </summary>
        </member>
        <member name="F:FlacLibSharp.PictureType.Composer">
            <summary>
            picture of the composer.
            </summary>
        </member>
        <member name="F:FlacLibSharp.PictureType.Lyricist">
            <summary>
            Picture of the Lyricist.
            </summary>
        </member>
        <member name="F:FlacLibSharp.PictureType.RecordingLocation">
            <summary>
            Picture of the recording location.
            </summary>
        </member>
        <member name="F:FlacLibSharp.PictureType.DuringRecording">
            <summary>
            Picture during the recording.
            </summary>
        </member>
        <member name="F:FlacLibSharp.PictureType.DuringPerformance">
            <summary>
            Picture during the performance.
            </summary>
        </member>
        <member name="F:FlacLibSharp.PictureType.MovieScreenCapture">
            <summary>
            A movie screen capture picture.
            </summary>
        </member>
        <member name="F:FlacLibSharp.PictureType.BrightColouredFish">
            <summary>
            A picture of a bright coloured fish. Yes, really ... a fish. Brightly coloured even!
            </summary>
        </member>
        <member name="F:FlacLibSharp.PictureType.Illustration">
            <summary>
            A picture of an illustration.
            </summary>
        </member>
        <member name="F:FlacLibSharp.PictureType.ArtistLogotype">
            <summary>
            A picture of the artist logo.
            </summary>
        </member>
        <member name="F:FlacLibSharp.PictureType.StudioLogotype">
            <summary>
            The studio logo.
            </summary>
        </member>
        <member name="T:FlacLibSharp.Picture">
            <summary>
            A picture metadata block.
            </summary>
        </member>
        <member name="M:FlacLibSharp.Picture.LoadBlockData(System.Byte[])">
            <summary>
            Loads the picture data from a Metadata block.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:FlacLibSharp.Picture.WriteBlockData(System.IO.Stream)">
            <summary>
            Will write the data describing this metadata block to the given stream.
            </summary>
            <param name="targetStream">Stream to write the data to.</param>
        </member>
        <member name="M:FlacLibSharp.Picture.CalculateMetadataBlockLength">
            <summary>
            Calculates the total size of this block, taking into account the lengths of the variable length fields.
            </summary>
        </member>
        <member name="M:FlacLibSharp.Picture.CalculateMetadataBlockLength(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Calculates the total size of this block, taking into account the lengths of the variable length fields.
            </summary>
            <param name="mimeLength"></param>
            <param name="descriptionLength"></param>
            <param name="pictureDataLength"></param>
            <remarks>If the lengths of the variable length fields are already available, use this function, otherwise use the parameterless override.</remarks>
        </member>
        <member name="P:FlacLibSharp.Picture.PictureType">
            <summary>
            What kind of picture this is.
            </summary>
        </member>
        <member name="P:FlacLibSharp.Picture.MIMEType">
            <summary>
            The MIME type of the picture file.
            </summary>
        </member>
        <member name="P:FlacLibSharp.Picture.Description">
            <summary>
            A description for the picture.
            </summary>
        </member>
        <member name="P:FlacLibSharp.Picture.Width">
            <summary>
            Width of the picture (in pixels).
            </summary>
        </member>
        <member name="P:FlacLibSharp.Picture.Height">
            <summary>
            Height of the picture (in pixels).
            </summary>
        </member>
        <member name="P:FlacLibSharp.Picture.ColorDepth">
            <summary>
            The colour depth of the picture.
            </summary>
        </member>
        <member name="P:FlacLibSharp.Picture.Colors">
            <summary>
            For color indexed pictures, all of the colours in the picture.
            </summary>
        </member>
        <member name="P:FlacLibSharp.Picture.Data">
            <summary>
            The actual picture data in a stream
            </summary>
        </member>
        <member name="P:FlacLibSharp.Picture.URL">
            <summary>
            The URL for the image if the MIME Type indicates a URL reference (MIME Type = '-->').
            </summary>
        </member>
        <member name="T:FlacLibSharp.SeekPoint">
            <summary>
            A seek point in a frame.
            </summary>
        </member>
        <member name="M:FlacLibSharp.SeekPoint.#ctor(System.Byte[])">
            <summary>
            Creates a new seekpoint.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:FlacLibSharp.SeekPoint.WriteData(System.IO.Stream)">
            <summary>
            Will write the data representing this SeekPoint to the given stream.
            </summary>
            <param name="targetStream"></param>
        </member>
        <member name="M:FlacLibSharp.SeekPoint.#ctor">
            <summary>
            Creates a place holder seekpoint.
            </summary>
        </member>
        <member name="M:FlacLibSharp.SeekPoint.ValidateIsPlaceholder">
            <summary>
            Checks if this SeekPoint is a place holder.
            </summary>
        </member>
        <member name="M:FlacLibSharp.SeekPoint.CompareTo(FlacLibSharp.SeekPoint)">
            <summary>
            Compares two seekpoints based on the "first sample number".
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:FlacLibSharp.SeekPoint.FirstSampleNumber">
            <summary>
            Sample number of the first sample in a target frame, 0xFFFFFFFFFFFFFFFF for a placeholder point.
            </summary>
        </member>
        <member name="P:FlacLibSharp.SeekPoint.ByteOffset">
            <summary>
            Offset (in bytes) from the first byte of the first frame header to the first byte of the target frame's header.
            </summary>
        </member>
        <member name="P:FlacLibSharp.SeekPoint.NumberOfSamples">
            <summary>
            Number of samples in the target frame.
            </summary>
        </member>
        <member name="P:FlacLibSharp.SeekPoint.IsPlaceHolder">
            <summary>
            Indicates if this seekpoint is a place holder.
            </summary>
        </member>
        <member name="T:FlacLibSharp.SeekPointCollection">
            <summary>
            A set of seekpoints in a seektable in the form of a sorted list, because seektables have to be sorted by Sample Number.
            </summary>
            <remarks>There is currently an issue with this list: it only kind-of supports multiple placeholders in a weird way!</remarks>
        </member>
        <member name="M:FlacLibSharp.SeekPointCollection.Add(FlacLibSharp.SeekPoint)">
            <summary>
            Adds a new seekpoint to the collection.
            </summary>
            <param name="seekPoint"></param>
        </member>
        <member name="M:FlacLibSharp.SeekPointCollection.Remove(FlacLibSharp.SeekPoint)">
            <summary>
            Removes a seekpoint from the collection (if found).
            </summary>
            <param name="seekPoint"></param>
        </member>
        <member name="P:FlacLibSharp.SeekPointCollection.Placeholders">
            <summary>
            Returns a counter to indicate how many placeholder seekpoints this list has.
            These are not actual seekpoints, because they don't really contain information (and their keys are all the same).
            </summary>
            <remarks>This is a rather special way to support this situation, hopefully in the future this can be changed to something more natural.</remarks>
        </member>
        <member name="T:FlacLibSharp.SeekTable">
            <summary>
            A seektable.
            </summary>
        </member>
        <member name="M:FlacLibSharp.SeekTable.LoadBlockData(System.Byte[])">
            <summary>
            Creates a new SeekTable base on the provided binary data.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:FlacLibSharp.SeekTable.WriteBlockData(System.IO.Stream)">
            <summary>
            Will write the data describing this metadata block to the given stream.
            </summary>
            <param name="targetStream">Stream to write the data to.</param>
        </member>
        <member name="P:FlacLibSharp.SeekTable.TotalSeekPoints">
            <summary>
            Gets the total number of SeekPoints (normal seekpoints + placeholder seekpoints).
            </summary>
            <remarks>Don't use this to loop through the indexes of the SeekPoints collection! It also contains the total nr of placeholders, which are not in that collection.</remarks>
        </member>
        <member name="P:FlacLibSharp.SeekTable.SeekPoints">
            <summary>
            The seekpoints in the seektable.
            </summary>
        </member>
        <member name="T:FlacLibSharp.Padding">
            <summary>
            Empty space inside the flac file ... a number of meaningless bits.
            </summary>
        </member>
        <member name="M:FlacLibSharp.Padding.#ctor">
            <summary>
            Creates an empty metadata block
            </summary>
        </member>
        <member name="M:FlacLibSharp.Padding.LoadBlockData(System.Byte[])">
            <summary>
            Loads the padding data from the given data.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:FlacLibSharp.Padding.WriteBlockData(System.IO.Stream)">
            <summary>
            Will write the data describing this metadata block to the given stream.
            </summary>
            <param name="targetStream">Stream to write the data to.</param>
        </member>
        <member name="P:FlacLibSharp.Padding.EmptyBitCount">
            <summary>
            How many empty bits there are in the padding (must be a multiple of eight).
            </summary>
        </member>
        <member name="M:FlacLibSharp.FLACUnknownMetaDataBlock.WriteBlockData(System.IO.Stream)">
            <summary>
            When overridden in a derived class, will write the data describing this metadata block to the given stream.
            </summary>
            <param name="targetStream">Stream to write the data to.</param>
        </member>
        <member name="T:FlacLibSharp.StreamInfo">
            <summary>
            A metadata block that contains information on the actual stream.
            </summary>
        </member>
        <member name="M:FlacLibSharp.StreamInfo.#ctor">
            <summary>
            Creates a StreamInfo from scratch, setting some sensible defaults.
            </summary>
            <remarks>Not sure why you would need this now, every FLAC already contains this and this library can't create actual FLAC files.</remarks>
        </member>
        <member name="M:FlacLibSharp.StreamInfo.LoadBlockData(System.Byte[])">
            <summary>
            Loads a new stream info block from the provided data.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:FlacLibSharp.StreamInfo.WriteBlockData(System.IO.Stream)">
            <summary>
            When overridden in a derived class, will write the data describing this metadata block to the given stream.
            </summary>
            <param name="targetStream">Stream to write the data to.</param>
        </member>
        <member name="P:FlacLibSharp.StreamInfo.MinimumBlockSize">
            <summary>
            The minimum block size (in samples) used in the stream.
            </summary>
        </member>
        <member name="P:FlacLibSharp.StreamInfo.MaximumBlockSize">
            <summary>
            The maximum block size (in samples) used in the stream. (Minimum blocksize == maximum blocksize) implies a fixed-blocksize stream.
            </summary>
        </member>
        <member name="P:FlacLibSharp.StreamInfo.MinimumFrameSize">
            <summary>
            The minimum frame size (in bytes) used in the stream. May be 0 to imply the value is not known.
            </summary>
        </member>
        <member name="P:FlacLibSharp.StreamInfo.MaximumFrameSize">
            <summary>
            The maximum frame size (in bytes) used in the stream. May be 0 to imply the value is not known.
            </summary>
        </member>
        <member name="P:FlacLibSharp.StreamInfo.SampleRateHz">
            <summary>
            Sample rate in Hz. Though 20 bits are available, the maximum sample rate is limited by the structure of frame headers to 655350Hz. Also, a value of 0 is invalid.
            </summary>
        </member>
        <member name="P:FlacLibSharp.StreamInfo.Channels">
            <summary>
            (number of channels)-1. FLAC supports from 1 to 8 channels
            </summary>
        </member>
        <member name="P:FlacLibSharp.StreamInfo.BitsPerSample">
            <summary>
            (bits per sample)-1. FLAC supports from 4 to 32 bits per sample. Currently the reference encoder and decoders only support up to 24 bits per sample.
            </summary>
        </member>
        <member name="P:FlacLibSharp.StreamInfo.Samples">
            <summary>
            Total samples in stream. 'Samples' means inter-channel sample, i.e. one second of 44.1Khz audio will have 44100 samples regardless of the number of channels. A value of zero here means the number of total samples is unknown.
            </summary>
        </member>
        <member name="P:FlacLibSharp.StreamInfo.MD5Signature">
            <summary>
            MD5 signature (16 byte) of the unencoded audio data. This allows the decoder to determine if an error exists in the audio data even when the error does not result in an invalid bitstream.
            </summary>
        </member>
        <member name="P:FlacLibSharp.StreamInfo.Duration">
            <summary>
            The duration of the audio in seconds, calculated based on the stream info.
            </summary>
        </member>
        <member name="T:FlacLibSharp.MetadataBlockHeader">
            <summary>
            A metadata block header.
            </summary>
        </member>
        <member name="M:FlacLibSharp.MetadataBlockHeader.#ctor(System.Byte[])">
            <summary>
            Creates a new metadata block header from the provided data.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:FlacLibSharp.MetadataBlockHeader.WriteHeaderData(System.IO.Stream)">
            <summary>
            Will write the data representing this header (as it is stored in the FLAC file) to the given stream.
            </summary>
            <param name="targetStream">The stream where the data will be written to.</param>
        </member>
        <member name="M:FlacLibSharp.MetadataBlockHeader.ParseData(System.Byte[])">
            <summary>
            Interprets the meta data block header.
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:FlacLibSharp.MetadataBlockHeader.IsLastMetaDataBlock">
            <summary>
            Indicates if this is the last metadata block in the file (meaning that it is followed by the actual audio stream).
            </summary>
        </member>
        <member name="P:FlacLibSharp.MetadataBlockHeader.Type">
            <summary>
            Defines what kind of metadatablock this is.
            </summary>
        </member>
        <member name="P:FlacLibSharp.MetadataBlockHeader.MetaDataBlockLength">
            <summary>
            Defines the length of the metadata block.
            </summary>
        </member>
        <member name="T:FlacLibSharp.MetadataBlockHeader.MetadataBlockType">
            <summary>
            Defines the type of meta data.
            </summary>
        </member>
        <member name="F:FlacLibSharp.MetadataBlockHeader.MetadataBlockType.None">
            <summary>
            An unknown type of metadata.
            </summary>
        </member>
        <member name="F:FlacLibSharp.MetadataBlockHeader.MetadataBlockType.StreamInfo">
            <summary>
            Information on the flac audio stream.
            </summary>
        </member>
        <member name="F:FlacLibSharp.MetadataBlockHeader.MetadataBlockType.Padding">
            <summary>
            A metadata block that pads some space. It has no further meaning.
            </summary>
        </member>
        <member name="F:FlacLibSharp.MetadataBlockHeader.MetadataBlockType.Application">
            <summary>
            A metadata block with application specific information.
            </summary>
        </member>
        <member name="F:FlacLibSharp.MetadataBlockHeader.MetadataBlockType.Seektable">
            <summary>
            A metadata block that has some information for seektables.
            </summary>
        </member>
        <member name="F:FlacLibSharp.MetadataBlockHeader.MetadataBlockType.VorbisComment">
            <summary>
            A metadata block that contains the vorbis comments (artist, field, ...)
            </summary>
        </member>
        <member name="F:FlacLibSharp.MetadataBlockHeader.MetadataBlockType.CueSheet">
            <summary>
            A metadata block containing cue sheet information.
            </summary>
        </member>
        <member name="F:FlacLibSharp.MetadataBlockHeader.MetadataBlockType.Picture">
            <summary>
            A metadata block with picture information.
            </summary>
        </member>
        <member name="F:FlacLibSharp.MetadataBlockHeader.MetadataBlockType.Invalid">
            <summary>
            A metadata block that is not valid or could not be parsed.
            </summary>
        </member>
        <member name="T:FlacLibSharp.VorbisComment">
            <summary>
            A metadata block contain the "Vorbis Comment" (artist, ...)
            </summary>
        </member>
        <member name="M:FlacLibSharp.VorbisComment.#ctor">
            <summary>
            Initializes a Vorbis comment block (without any content).
            </summary>
        </member>
        <member name="M:FlacLibSharp.VorbisComment.LoadBlockData(System.Byte[])">
            <summary>
            Loads the Vorbis from a block of data.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:FlacLibSharp.VorbisComment.WriteBlockData(System.IO.Stream)">
            <summary>
            Will write the data describing this metadata block to the given stream.
            </summary>
            <param name="targetStream">Stream to write the data to.</param>
        </member>
        <member name="M:FlacLibSharp.VorbisComment.AddComment(System.String)">
            <summary>
            Adds a comment to the list of vorbis comments.
            </summary>
            <param name="comment"></param>
        </member>
        <member name="M:FlacLibSharp.VorbisComment.AddComment(System.String,System.String)">
            <summary>
            Adds a comment to the list of vorbis comments.
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="M:FlacLibSharp.VorbisComment.ContainsField(System.String)">
            <summary>
            Checks whether a field with the given key is present in the Vorbis Comment data.
            </summary>
            <param name="key">The key of the vorbis comment field.</param>
            <returns>True if such a field is available.</returns>
        </member>
        <member name="P:FlacLibSharp.VorbisComment.Vendor">
            <summary>
            The Vendor of the flac file.
            </summary>
        </member>
        <member name="P:FlacLibSharp.VorbisComment.Item(System.String)">
            <summary>
            Get one of the vorbis comment.
            </summary>
            <param name="key">The key of the vorbis comment field.</param>
            <returns>The value of the vorbis comment field.</returns>
        </member>
        <member name="P:FlacLibSharp.VorbisComment.Artist">
            <summary>
            Gets or sets the Artist if available.
            </summary>
            <remarks>If not found an empty string is returned.</remarks>
        </member>
        <member name="P:FlacLibSharp.VorbisComment.Title">
            <summary>
            Gets or sets the Title if available.
            </summary>
            <remarks>If not found an empty string is returned.</remarks>
        </member>
        <member name="P:FlacLibSharp.VorbisComment.Album">
            <summary>
            Gets or sets the Album if available.
            </summary>
            <remarks>If not found an empty string is returned.</remarks>
        </member>
        <member name="P:FlacLibSharp.VorbisComment.Date">
            <summary>
            Gets or sets the Date if available.
            </summary>
            <remarks>If not found an empty string is returned.</remarks>
        </member>
        <member name="P:FlacLibSharp.VorbisComment.TrackNumber">
            <summary>
            Gets or sets the Tacknumber if available.
            </summary>
            <remarks>If not found an empty string is returned.</remarks>
        </member>
        <member name="P:FlacLibSharp.VorbisComment.Genre">
            <summary>
            Gets or sets the Genre if available.
            </summary>
            <remarks>If not found an empty string is returned.</remarks>
        </member>
    </members>
</doc>
